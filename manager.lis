     1                                  ;****************************************************************************************************************************
     2                                  ;Program Name: "Execution Speed".                                                                                           *
     3                                  ;This program will utilize the x86-64 microprocessor clock to measure the average time required to perform one              *
     4                                  ;floating point addition.                                                                                                   *
     5                                  ;Copyright (C) 2025 Kayla Ngo                                                                                               *
     6                                  ;                                                                                                                           *
     7                                  ;This file is part of the software program "Execution Speed".                                                               *
     8                                  ;"Execution Speed" is free software: you can redistribute it and/or modify it under the terms of the GNU General Public     *
     9                                  ;License version 3 as published by the Free Software Foundation.                                                            *
    10                                  ;"Execution Speed" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even                *
    11                                  ;the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more  *
    12                                  ;details.  A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                 *
    13                                  ;****************************************************************************************************************************
    14                                  
    15                                  ;================================================================================================================================
    16                                  ;
    17                                  ;Author Information
    18                                  ;  Name: Kayla Ngo
    19                                  ;  Email: kngo29@csu.fullerton.edu
    20                                  ;  CWID: 885083436
    21                                  ;  Course: CPSC 240-09
    22                                  ;
    23                                  ;Program Information
    24                                  ;  Name: Execution Speed
    25                                  ;  Programming Languages:: x86-64
    26                                  ;  Effective Date: April 23, 2025
    27                                  ;  Latest Update: April 23, 2025
    28                                  ;  Date open source license added: April 23, 2025
    29                                  ;  Files: manager.asm, read_clock.asm, cvtt2n.asm, clock.cpp, r.sh
    30                                  ;  Status:
    31                                  ;  References Consulted: Ed Jorgensen, "x86-64 Assembly Language Programming with Ubuntu"
    32                                  ;  Future Upgrades:
    33                                  ;
    34                                  ;Purpose
    35                                  ;  This program will utilize the x86-64 microprocessor clock to measure the average time required to perform one
    36                                  ;  floating point addition. The unit of time for the clock of the CPU is "tic", and the speed of the processor
    37                                  ;  is measured by the number of tics produced per second.
    38                                  ;
    39                                  ;Development Information
    40                                  ;  OS: Ubuntu 24.04.2 LTS
    41                                  ;  Text Editor: Visual Studio Code
    42                                  ;  Tools: NASM
    43                                  ;
    44                                  ;Current File Information
    45                                  ;  Name: manager.asm
    46                                  ;  Language: x86 with Intel syntax.
    47                                  ;  Max page width: 130 columns
    48                                  ;  Assemble: nasm -f elf64 -l manager.lis -o manager.o manager.asm
    49                                  ;
    50                                  ;================================================================================================================================
    51                                  
    52                                  
    53                                  ;Declarations
    54                                  global    manager
    55                                  extern    printf, scanf
    56                                  extern    atof
    57                                  extern    read_clock
    58                                  
    59                                  
    60                                  
    61                                  segment    .data
    62                                  ;Declare arrays initialized
    63 00000000 0A5468652070726573-       present_time    db 10, "The present time on the clock is %llu tics.", 10, 0
    63 00000009 656E742074696D6520-
    63 00000012 6F6E2074686520636C-
    63 0000001B 6F636B20697320256C-
    63 00000024 6C7520746963732E0A-
    63 0000002D 00                 
    64 0000002E 0A456E746572207468-       enter_prompt    db 10, "Enter the float numbers positive or negative separated by ws. Terminate with ctrl+d:", 10, 0
    64 00000037 6520666C6F6174206E-
    64 00000040 756D6265727320706F-
    64 00000049 736974697665206F72-
    64 00000052 206E65676174697665-
    64 0000005B 207365706172617465-
    64 00000064 642062792077732E20-
    64 0000006D 5465726D696E617465-
    64 00000076 207769746820637472-
    64 0000007F 6C2B643A0A00       
    65 00000085 0A5468652073756D20-       print_sum    db 10, "The sum of these numbers is %lf.", 10, 0
    65 0000008E 6F6620746865736520-
    65 00000097 6E756D626572732069-
    65 000000A0 7320256C662E0A00   
    66 000000A8 256C6600                  float_format    db "%lf", 0
    67 000000AC 64656275673A20256C-       debug    db "debug: %lf", 10, 0
    67 000000B5 660A00             
    68                                  
    69                                  
    70                                  
    71                                  segment    .bss
    72                                  ;Declare arrays with no data initially
    73                                    align    64
    74 00000000 <res 320h>                backup_strg    resb 800
    75 00000320 <res 100h>                input_buffer    resb 256
    76 00000420 <res 800h>                float_arr    resq 256
    77                                  
    78                                  
    79                                  
    80                                  
    81                                  segment    .text
    82                                  manager:
    83                                    ;Back-up GPRs
    84 00000000 55                        push    rbp
    85 00000001 4889E5                    mov    rbp, rsp
    86 00000004 53                        push    rbx
    87 00000005 51                        push    rcx
    88 00000006 52                        push    rdx
    89 00000007 56                        push    rsi
    90 00000008 57                        push    rdi
    91 00000009 4150                      push    r8
    92 0000000B 4151                      push    r9
    93 0000000D 4152                      push    r10
    94 0000000F 4153                      push    r11
    95 00000011 4154                      push    r12
    96 00000013 4155                      push    r13
    97 00000015 4156                      push    r14
    98 00000017 4157                      push    r15
    99 00000019 9C                        pushf
   100                                  
   101 0000001A B800000000                mov    rax, 0
   102 0000001F E8(00000000)              call    read_clock
   103 00000024 4989C4                    mov    r12, rax
   104                                  
   105 00000027 B800000000                mov    rax, 0
   106 0000002C 48BF-                     mov    rdi, present_time
   106 0000002E [0000000000000000] 
   107 00000036 4C89E6                    mov    rsi, r12
   108 00000039 E8(00000000)              call    printf
   109                                  
   110 0000003E B800000000                mov    rax, 0
   111 00000043 48BF-                     mov    rdi, enter_prompt
   111 00000045 [2E00000000000000] 
   112 0000004D E8(00000000)              call    printf
   113                                  
   114 00000052 49BD-                     mov    r13, float_arr
   114 00000054 [2004000000000000] 
   115 0000005C 41BE00000000              mov    r14, 0    ;index
   116                                  
   117                                  loop_start:
   118 00000062 6A00                      push    qword 0
   119 00000064 6A00                      push    qword 0
   120                                  
   121 00000066 B800000000                mov    rax, 0
   122 0000006B 48BF-                     mov    rdi, float_format
   122 0000006D [A800000000000000] 
   123 00000075 488D3425[20030000]        lea    rsi, [input_buffer]
   124 0000007D E8(00000000)              call    scanf
   125                                  
   126 00000082 83F8FF                    cmp    eax, -1
   127 00000085 740E                      je    ctrl_d
   128                                  
   129 00000087 F2430F1144F500            movsd    qword[r13+r14*8], xmm0
   130 0000008E 49FFC6                    inc    r14
   131                                  
   132 00000091 58                        pop    rax
   133 00000092 58                        pop    rax
   134                                    
   135 00000093 EBCD                      jmp    loop_start
   136                                  
   137                                  ctrl_d:
   138 00000095 58                        pop    rax
   139 00000096 58                        pop    rax
   140                                  
   141                                  loop_end:
   142                                  
   143 00000097 41BF00000000            mov    r15, 0
   144 0000009D 66450F57E4              xorpd    xmm12, xmm12
   145                                  
   146                                  sum:
   147                                  ;Exit loop at the end of iteration (max size)
   148 000000A2 4D39F7                  cmp    r15, r14
   149 000000A5 7D0C                    jge    end_sum
   150                                  
   151 000000A7 F2470F5864FD00          addsd    xmm12, qword[r13+r15*8]
   152                                  
   153 000000AE 49FFC7                  inc    r15
   154                                  
   155 000000B1 EBEF                    jmp    sum
   156                                  
   157                                  end_sum:
   158 000000B3 B801000000              mov rax, 1
   159 000000B8 48BF-                   mov    rdi, print_sum
   159 000000BA [8500000000000000] 
   160 000000C2 F2410F10C4              movsd xmm0, xmm12
   161 000000C7 E8(00000000)            call    printf
   162                                  
   163                                  
   164                                  
   165                                  
   166                                    ;Restore GPRs
   167 000000CC 9D                        popf
   168 000000CD 415F                      pop    r15
   169 000000CF 415E                      pop    r14
   170 000000D1 415D                      pop    r13
   171 000000D3 415C                      pop    r12
   172 000000D5 415B                      pop    r11
   173 000000D7 415A                      pop    r10
   174 000000D9 4159                      pop    r9
   175 000000DB 4158                      pop    r8
   176 000000DD 5E                        pop    rsi
   177 000000DE 5F                        pop    rdi
   178 000000DF 5A                        pop    rdx
   179 000000E0 59                        pop    rcx
   180 000000E1 5B                        pop    rbx
   181 000000E2 5D                        pop    rbp
   182                                  
   183 000000E3 C3                        ret
